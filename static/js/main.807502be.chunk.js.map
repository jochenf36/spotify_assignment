{"version":3,"sources":["App.module.css","Components/ArtistCover/ArtistCover.module.css","Components/AlbumCover/AlbumCover.module.css","Components/ArtistOverview/ArtistsOverview.module.css","Components/AlbumsOverview/AlbumsOverview.module.css","Components/Spinner/Spinner.module.css","Components/Spinner/assets/rings.svg","Components/ArtistCover/ArtistCover.tsx","Components/ArtistOverview/ArtistsOverview.tsx","Components/AlbumCover/AlbumCover.tsx","Components/AlbumsOverview/AlbumsOverview.tsx","gqls.tsx","Components/Spinner/Spinner.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ArtistCover","id","name","image","clickedArtist","isSelected","cover","containerClass","styles","container","selected","join","className","data-testid","onClick","src","alt","loading","title","ArtistsOverview","artists","selectedArtist","length","map","artist","i","key","AlbumCover","AlbumsOverview","albums","album","GET_ARTISTS","gql","Spinner","icon","App","useState","keyword","setKeyword","selectedArtists","setSelectedArtists","useQuery","variables","data","queryArtists","changeArtist","index","findIndex","ArtistsAndAlbums","header","aria-label","type","placeholder","searchInput","value","onChange","event","target","Boolean","window","location","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.807502be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"header\":\"App_header__3ZZ1n\",\"title\":\"App_title__-GfWs\",\"searchInput\":\"App_searchInput__2whkh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ArtistCover_container__1mTtu\",\"selected\":\"ArtistCover_selected__2fi6w\",\"cover\":\"ArtistCover_cover__1xmXK\",\"title\":\"ArtistCover_title__2RSjg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AlbumCover_container__8XuiS\",\"cover\":\"AlbumCover_cover__2-3N4\",\"title\":\"AlbumCover_title__2AZcN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"artists\":\"ArtistsOverview_artists__e6dFV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"albums\":\"AlbumsOverview_albums__8MvaW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Spinner_container__1R-f4\"};","module.exports = __webpack_public_path__ + \"static/media/rings.d86931f4.svg\";","import React from 'react';\nimport styles from './ArtistCover.module.css';\n\nconst PLACEHOLDER_IMAGE = 'http://placekitten.com/200/300';\n\nexport interface ArtistCoverProps {\n  id: string;\n  name: string;\n  image: string;\n  clickedArtist: (id: string) => void;\n  isSelected: boolean;\n}\n\nexport const ArtistCover: React.FC<ArtistCoverProps> = ({\n  id,\n  name,\n  image,\n  clickedArtist,\n  isSelected,\n}) => {\n  function onCoverClick() {\n    clickedArtist(id);\n  }\n\n  const cover = image === '' ? PLACEHOLDER_IMAGE : image;\n\n  const containerClass = [styles.container, isSelected && styles.selected].join(\n    ' '\n  );\n\n  return (\n    <li\n      className={containerClass}\n      data-testid={`artist-${id}`}\n      onClick={onCoverClick}\n    >\n      <img\n        className={styles.cover}\n        src={cover}\n        alt={`${name}-cover`}\n        loading=\"lazy\"\n      />\n      <span className={styles.title}>{name}</span>\n    </li>\n  );\n};\n","import React from 'react';\nimport styles from './ArtistsOverview.module.css';\nimport { ArtistCover } from '../ArtistCover';\nimport { Artist } from '../../Common/types';\n\nexport interface ArtistsOverviewProps {\n  artists: Artist[];\n  clickedArtist: (id: string) => void;\n  selectedArtist?: number;\n}\n\nexport const ArtistsOverview: React.FC<ArtistsOverviewProps> = ({\n  artists = [],\n  clickedArtist,\n  selectedArtist,\n}) => (\n  <>\n    <h2 className={styles.title}>Artists</h2>\n    {artists.length > 0 ? (\n      <ul className={styles.artists}>\n        {artists.map((artist, i) => (\n          <ArtistCover\n            key={artist.id}\n            {...artist}\n            clickedArtist={clickedArtist}\n            isSelected={i === selectedArtist || false}\n          />\n        ))}\n      </ul>\n    ) : (\n      <div>No results Found</div>\n    )}\n  </>\n);\n","import React from 'react';\nimport styles from './AlbumCover.module.css';\n\nconst PLACEHOLDER_IMAGE = 'http://placekitten.com/200/300';\n\nexport interface AlbumCoverProps {\n  id: string;\n  name: string;\n  image: string;\n}\n\nexport const AlbumCover: React.FC<AlbumCoverProps> = ({ id, name, image }) => {\n  const cover = image === '' ? PLACEHOLDER_IMAGE : image;\n  return (\n    <li className={styles.container} data-testid={`album-${id}`}>\n      <img\n        className={styles.cover}\n        src={cover}\n        alt={`${name}-cover`}\n        loading=\"lazy\"\n      />\n      <span className={styles.title}>{name}</span>\n    </li>\n  );\n};\n","import React from 'react';\nimport styles from './AlbumsOverview.module.css';\nimport { AlbumCoverProps, AlbumCover } from '../AlbumCover';\n\ntype albums = AlbumCoverProps[];\n\nexport interface AlbumsOverviewProps {\n  albums: albums;\n}\n\nexport const AlbumsOverview: React.FC<AlbumsOverviewProps> = ({\n  albums = [],\n}) => (\n  <>\n    <h2 className={styles.title}>Albums</h2>\n    {albums.length > 0 ? (\n      <ul className={styles.albums}>\n        {albums.map((album) => (\n          <AlbumCover {...album} key={album.id} />\n        ))}\n      </ul>\n    ) : (\n      <div>No results Found</div>\n    )}\n  </>\n);\n","import { gql } from '@apollo/client';\nimport { Artist } from './Common/types';\n\nexport interface ArtistsData {\n  queryArtists: Artist[];\n}\n\nexport interface ArtistsVars {\n  name: string;\n}\nexport const GET_ARTISTS = gql`\n  query GetArtists($name: String!) {\n    queryArtists(byName: $name) {\n      name\n      id\n      image\n      albums {\n        name\n        id\n        image\n        tracks {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport styles from './Spinner.module.css';\nimport icon from './assets/rings.svg';\n\nexport const Spinner: React.FC = () => (\n  <div className={styles.container}>\n    <img src={icon} alt=\"spinner\" />\n  </div>\n);\n","import React, { useState, ChangeEvent } from 'react';\nimport styles from './App.module.css';\nimport { ArtistsOverview } from './Components/ArtistOverview';\nimport { AlbumsOverview } from './Components/AlbumsOverview';\n\nimport { useQuery } from '@apollo/client';\nimport { GET_ARTISTS, ArtistsVars, ArtistsData } from './gqls';\nimport { Spinner } from './Components/Spinner';\nimport { Artist } from './Common/types';\n\nconst DEFAULT_KEYWORD = '';\n\nfunction App() {\n  const [keyword, setKeyword] = useState(DEFAULT_KEYWORD);\n  const [selectedArtists, setSelectedArtists] = useState(0);\n\n  const { loading, data = { queryArtists: [] } } = useQuery<\n    ArtistsData,\n    ArtistsVars\n  >(GET_ARTISTS, {\n    variables: { name: keyword },\n  });\n\n  function changeArtist(id: string) {\n    const index = data.queryArtists.findIndex(\n      (artist: Artist) => artist.id === id\n    );\n    setSelectedArtists(index);\n  }\n\n  function handleSearchInput(event: ChangeEvent<HTMLInputElement>) {\n    setSelectedArtists(0);\n    setKeyword(event.target.value);\n  }\n\n  const ArtistsAndAlbums = () =>\n    keyword.length > 0 ? (\n      <>\n        {loading ? (\n          <Spinner />\n        ) : (\n          <>\n            <ArtistsOverview\n              artists={data.queryArtists}\n              clickedArtist={changeArtist}\n              selectedArtist={selectedArtists}\n            />\n            <br />\n\n            <AlbumsOverview\n              albums={data.queryArtists[selectedArtists]?.albums}\n            />\n          </>\n        )}\n      </>\n    ) : null;\n\n  return (\n    <div className={styles.container}>\n      <header className={styles.header}>\n        <h1 className={styles.title}>Search Artists</h1>\n        <input\n          aria-label=\"searchInput\"\n          type=\"text\"\n          id=\"searchInput\"\n          name=\"searchInput\"\n          placeholder=\"Enter a keyword\"\n          className={styles.searchInput}\n          value={keyword}\n          onChange={handleSearchInput}\n        />\n      </header>\n      <ArtistsAndAlbums />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://spotify-graphql-server.herokuapp.com/graphql',\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}